-- CREAR ID TRABAJADOR
CREATE OR REPLACE TRIGGER MVCD_ID_TRABAJADOR
BEFORE INSERT ON MVCD_TRABAJADORES
FOR EACH ROW
DECLARE
    ID_TRABAJADOR_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_TRABAJADOR)+1,1) INTO ID_TRABAJADOR_T
    FROM MVCD_TRABAJADORES;
    :NEW.ID_TRABAJADOR := ID_TRABAJADOR_T;
END;

-- CREAR TRABAJADOR
CREATE OR REPLACE PROCEDURE MVCD_C_TRABAJADOR(
    NOMBRE_TRABAJADOR_P VARCHAR2,
    APELLIDO1_TRABAJADOR_P VARCHAR2,
    APELLIDO2_TRABAJADOR_P VARCHAR2,
    TELEFONO_TRABAJADOR_P VARCHAR2,
    CORREO_P VARCHAR2,
    ID_REGION_P NUMBER,
    ID_ROL_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_TRABAJADORES IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_TRABAJADORES(TELEFONO_TRABAJADOR,CORREO,NOMBRE_TRABAJADOR,APELLIDO1_TRABAJADOR,APELLIDO2_TRABAJADOR,ID_REGION,ID_ROL)
        VALUES(TELEFONO_TRABAJADOR_P,UPPER(CORREO_P),UPPER(NOMBRE_TRABAJADOR_P),UPPER(APELLIDO1_TRABAJADOR_P),UPPER(APELLIDO2_TRABAJADOR_P),ID_REGION_P,ID_ROL_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

-- (READ) LEER TRABAJADOR

-- (UPDATE) ACTUALIZAR TRABAJADOR

CREATE OR REPLACE PROCEDURE MVCD_U_TRABAJADOR(
    ID_TRABAJADOR_P NUMBER,
    NOMBRE_TRABAJADOR_P VARCHAR2,
    APELLIDO1_TRABAJADOR_P VARCHAR2,
    APELLIDO2_TRABAJADOR_P VARCHAR2,
    TELEFONO_TRABAJADOR_P NUMBER,
    CORREO_P VARCHAR2,
    ID_ROL_P NUMBER,
    ID_REGION_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_TRABAJADORES IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_TRABAJADORES SET
        NOMBRE_TRABAJADOR = NOMBRE_TRABAJADOR_P,
        APELLIDO1_TRABAJADOR = APELLIDO1_TRABAJADOR_P,
        APELLIDO2_TRABAJADOR = APELLIDO2_TRABAJADOR_P,
        TELEFONO_TRABAJADOR = TELEFONO_TRABAJADOR_P,
        CORREO = CORREO_P,
        ID_ROL = ID_ROL_P,
        ID_REGION = ID_REGION_P
    WHERE ID_TRABAJADOR = ID_TRABAJADOR_P;
    
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

-- (DELETE) BORRAR TRABAJADOR

CREATE OR REPLACE PROCEDURE MVCD_D_TRABAJADOR(
    ID_TRABAJADOR_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_TRABAJADORES IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_TRABAJADORES WHERE ID_TRABAJADOR = ID_TRABAJADOR_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

-- CREAR ID CLIENTES
CREATE OR REPLACE TRIGGER MVCD_ID_CLIENTES
BEFORE INSERT ON MVCD_CLIENTES
FOR EACH ROW
DECLARE
    ID_CLIENTE_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_CLIENTE)+1,1) INTO ID_CLIENTE_T
    FROM MVCD_CLIENTES;
    :NEW.ID_CLIENTE := ID_CLIENTE_T;
END;

-- CREAR TRABAJADOR
CREATE OR REPLACE PROCEDURE MVCD_C_CLIENTE(
    NOMBRE_CLIENTE_P VARCHAR2,
    APELLIDO1_CLIENTE_P VARCHAR2,
    APELLIDO2_CLIENTE_P VARCHAR2,
    TELEFONO_CLIENTE_P VARCHAR2,
    ID_REGION_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CLIENTES IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_CLIENTES(NOMBRE_CLIENTE,APELLIDO1_CLIENTE,APELLIDO2_CLIENTE,TELEFONO_CLIENTE,ID_REGION)
        VALUES(NOMBRE_CLIENTE_P,APELLIDO1_CLIENTE_P,APELLIDO2_CLIENTE_P,TELEFONO_CLIENTE_P,ID_REGION_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

-- (READ) LEER CLIENTE

-- (UPDATE) ACTUALIZAR TRABAJADOR

CREATE OR REPLACE PROCEDURE MVCD_U_CLIENTE(
    ID_CLIENTE_P NUMBER,
    NOMBRE_CLIENTE_P VARCHAR2,
    APELLIDO1_CLIENTE_P VARCHAR2,
    APELLIDO2_CLIENTE_P VARCHAR2,
    TELEFONO_CLIENTE_P NUMBER,
    ID_REGION_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CLIENTES IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_CLIENTES SET
        NOMBRE_CLIENTE = NOMBRE_CLIENTE_P,
        APELLIDO1_CLIENTE = APELLIDO1_CLIENTE_P,
        APELLIDO2_CLIENTE = APELLIDO2_CLIENTE_P,
        TELEFONO_CLIENTE = TELEFONO_CLIENTE_P,
        ID_REGION = ID_REGION_P
    WHERE ID_CLIENTE_P = ID_CLIENTE;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

-- (DELETE) BORRAR TRABAJADOR

CREATE OR REPLACE PROCEDURE MVCD_D_CLIENTE(
    ID_CLIENTE_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CLIENTES IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_CLIENTES WHERE ID_CLIENTE = ID_CLIENTE_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

-- ID PRODUCTOS
CREATE OR REPLACE TRIGGER MVCD_ID_PRODUCTOS
BEFORE INSERT ON MVCD_PRODUCTOS
FOR EACH ROW
DECLARE
    ID_PRODUCTO_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_PRODUCTO)+1,0) INTO ID_PRODUCTO_T
    FROM MVCD_PRODUCTOS;
    :NEW.ID_PRODUCTO := ID_PRODUCTO_T;
END;


-- CREAR PRODUCTOS

CREATE OR REPLACE PROCEDURE MVCD_C_PRODUCTO(
    NOMBRE_PRODUCTO_P VARCHAR2,
    TIPO_PRODUCTO_P NUMBER,
    PRECIO_PRODUCTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PRODUCTOS IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_PRODUCTOS(NOMBRE_PRODUCTO,TIPO_PRODUCTO,PRECIO_PRODUCTO)
        VALUES(NOMBRE_PRODUCTO_P,TIPO_PRODUCTO_P,PRECIO_PRODUCTO_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500,'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'ERROR DESCONOCIDO');
    ROLLBACK;
END;

-- LEER PRODUCTOS

-- ACTUALIZAR PRODUCTOS

CREATE OR REPLACE PROCEDURE MVCD_U_PRODUCTO(
    ID_PRODUCTO_P NUMBER,
    NOMBRE_PRODUCTO_P VARCHAR2,
    TIPO_PRODUCTO_P NUMBER,   
    PRECIO_PRODUCTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PRODUCTOS IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_PRODUCTOS SET 
        NOMBRE_PRODUCTO = NOMBRE_PRODUCTO_P,
        TIPO_PRODUCTO = TIPO_PRODUCTO_P,
        PRECIO_PRODUCTO = PRECIO_PRODUCTO_P
    WHERE ID_PRODUCTO = ID_PRODUCTO_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500,'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'ERROR DESCONOCIDO');
    ROLLBACK;
END;

-- BORRAR PRODUCTOS

CREATE OR REPLACE PROCEDURE MVCD_D_PRODUCTO(
    ID_PRODUCTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PRODUCTOS IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_PRODUCTOS
    WHERE ID_PRODUCTO = ID_PRODUCTO_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500,'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE TRIGGER MVCD_ID_PROMOCION
BEFORE INSERT ON MVCD_PROMOCIONES
FOR EACH ROW
DECLARE
    ID_PROMOCION_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_PROMOCION)+1,1) INTO ID_PROMOCION_T
    FROM MVCD_PROMOCIONES;
    :NEW.ID_PROMOCION := ID_PROMOCION_T;
END;

CREATE OR REPLACE PROCEDURE MVCD_C_PROMOCION(
    DESCUENTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PROMOCIONES IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_PROMOCIONES(DESCUENTO)
        VALUES(DESCUENTO_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500,'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_U_PROMOCION(
    ID_PROMOCION_P NUMBER,
    DESCUENTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PROMOCIONES IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_PROMOCIONES SET
        DESCUENTO = DESCUENTO_P
    WHERE ID_PROMOCION = ID_PROMOCION_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500,'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_D_PROMOCION(
    ID_PROMOCION_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PROMOCIONES IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_PROMOCIONES
    WHERE ID_PROMOCION = ID_PROMOCION_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500,'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE TRIGGER MVCD_ID_ROLES
BEFORE INSERT ON MVCD_ROLES
FOR EACH ROW
DECLARE
    ID_ROL_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_ROL)+1,1) INTO ID_ROL_T
    FROM MVCD_ROLES;
    :NEW.ID_ROL := ID_ROL_T;
END;

CREATE OR REPLACE PROCEDURE MVCD_C_ROL(
    AREA_TRABAJO_P VARCHAR2
)
IS
BEGIN
    LOCK TABLE MVCD_ROLES IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_ROLES(AREA_TRABAJO)
        VALUES(AREA_TRABAJO_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_U_ROL(
    ID_ROL_P NUMBER,
    AREA_TRABAJO_P VARCHAR2
)
IS
BEGIN
    LOCK TABLE MVCD_ROLES IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_ROLES
    SET AREA_TRABAJO = AREA_TRABAJO_P
    WHERE ID_ROL = ID_ROL_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_D_ROL(
    ID_ROL_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_ROLES IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_ROLES
    WHERE ID_ROL = ID_ROL_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE TRIGGER MVCD_ID_CALLE
BEFORE INSERT ON MVCD_CALLE_DIRECCION
FOR EACH ROW
DECLARE
    ID_CALLE_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_CALLE)+1,1) INTO ID_CALLE_T
    FROM MVCD_CALLE_DIRECCION;
    :NEW.ID_CALLE := ID_CALLE_T;
END;

CREATE OR REPLACE PROCEDURE MVCD_C_CALLE_DIRECCION(
    CALLE_DIRECCION_P VARCHAR2,
    NRO_DIRECCION_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CALLE_DIRECCION IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_CALLE_DIRECCION(CALLE_DIRECCION,NRO_DIRECCION)
        VALUES(CALLE_DIRECCION_P,NRO_DIRECCION_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_U_CALLE_DIRECCION(
    ID_CALLE_P NUMBER,
    CALLE_DIRECCION_P VARCHAR2,
    NRO_DIRECCION_P NUMBER
)
IS
BEGIN
    UPDATE MVCD_CALLE_DIRECCION SET
        CALLE_DIRECCION = CALLE_DIRECCION_P,
        NRO_DIRECCION = NRO_DIRECCION_P
    WHERE ID_CALLE_P = ID_CALLE;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_D_CALLE_DIRECCION(
    ID_CALLE_P NUMBER
)
IS
BEGIN
    DELETE FROM MVCD_CALLE_DIRECCION
    WHERE ID_CALLE_P = ID_CALLE;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE TRIGGER MVCD_ID_CIUDAD
BEFORE INSERT ON MVCD_CIUDADES
FOR EACH ROW
DECLARE
    ID_CIUDAD_TR NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_CIUDAD_T)+1,1) INTO ID_CIUDAD_TR
    FROM MVCD_CIUDADES;
    :NEW.ID_CIUDAD_T := ID_CIUDAD_TR;
END;

CREATE OR REPLACE PROCEDURE MVCD_C_CIUDAD(
    NOMBRE_CIUDAD_P VARCHAR2,
    ID_CALLE_P NUMBER,
    ID_REGION_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CIUDADES IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_CIUDADES(NOMBRE_CIUDAD,ID_CALLE,ID_REGION)
        VALUES(NOMBRE_CIUDAD_P,ID_CALLE_P,ID_REGION_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_U_CIUDAD(
    ID_CIUDAD_T_P NUMBER,
    NOMBRE_CIUDAD_P VARCHAR2,
    ID_CALLE_P NUMBER,
    ID_REGION_P NUMBER
)
IS
BEGIN
    UPDATE MVCD_CIUDADES SET
        NOMBRE_CIUDAD = NOMBRE_CIUDAD_P,
        ID_CALLE = ID_CALLE_P,
        ID_REGION = ID_REGION_P
    WHERE ID_CIUDAD_T = ID_CIUDAD_T_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_D_CIUDAD(
    ID_CIUDAD_T_P NUMBER
)
IS
BEGIN
    DELETE FROM MVCD_CIUDADES
    WHERE ID_CIUDAD_T = ID_CIUDAD_T_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE TRIGGER MVCD_ID_CUENTA_BANCARIA
BEFORE INSERT ON MVCD_CUENTA_BANCARIA
FOR EACH ROW
DECLARE
    ID_CUENTA_BANCARIA_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_CUENTA_BANCARIA)+1,1) INTO ID_CUENTA_BANCARIA_T
    FROM MVCD_CUENTA_BANCARIA;
    :NEW.ID_CUENTA_BANCARIA := ID_CUENTA_BANCARIA_T;
END;

CREATE OR REPLACE PROCEDURE MVCD_C_CUENTA_BANCARIA(
    RUT_P NUMBER,
    TIPO_CUENTA_BANCARIA_P VARCHAR2,
    NRO_CUENTA_BANCARIA_P NUMBER,
    NOMBRE_BANCO_P VARCHAR2,
    ID_TRABAJADOR_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CUENTA_BANCARIA IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_CUENTA_BANCARIA(RUT,TIPO_CUENTA_BANCARIA,NRO_CUENTA_BANCARIA,NOMBRE_BANCO,ID_TRABAJADOR)
        VALUES(RUT_P,TIPO_CUENTA_BANCARIA_P,NRO_CUENTA_BANCARIA_P,NOMBRE_BANCO_P,ID_TRABAJADOR_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_U_CUENTA_BANCARIA(
    ID_CUENTA_BANCARIA_P NUMBER,
    RUT_P NUMBER,
    TIPO_CUENTA_BANCARIA_P VARCHAR2,
    NRO_CUENTA_BANCARIA_P NUMBER,
    NOMBRE_BANCO_P VARCHAR2,
    ID_TRABAJADOR_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CUENTA_BANCARIA IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_CUENTA_BANCARIA SET
        RUT = RUT_P,
        TIPO_CUENTA_BANCARIA = TIPO_CUENTA_BANCARIA_P,
        NRO_CUENTA_BANCARIA = NRO_CUENTA_BANCARIA_P,
        NOMBRE_BANCO = NOMBRE_BANCO_P,
        ID_TRABAJADOR = ID_TRABAJADOR_P
    WHERE ID_CUENTA_BANCARIA = ID_CUENTA_BANCARIA_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_D_CUENTA_BANCARIA(
    ID_CUENTA_BANCARIA_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CUENTA_BANCARIA IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_CUENTA_BANCARIA
    WHERE ID_CUENTA_BANCARIA = ID_CUENTA_BANCARIA_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE TRIGGER MVCD_ID_INVENTARIO
BEFORE INSERT ON MVCD_INVENTARIO
FOR EACH ROW
DECLARE
    ID_INVENTARIO_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_INVENTARIO)+1,1) INTO ID_INVENTARIO_T
    FROM MVCD_INVENTARIO;
    :NEW.ID_INVENTARIO := ID_INVENTARIO_T;
END;

CREATE OR REPLACE PROCEDURE MVCD_C_INVENTARIO(
    CANTIDAD_INVENTARIO_P NUMBER,
    ID_PRODUCTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_INVENTARIO IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_INVENTARIO(CANTIDAD_INVENTARIO,ID_PRODUCTO)
        VALUES(CANTIDAD_INVENTARIO_P,ID_PRODUCTO_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_U_INVENTARIO(
    ID_INVENTARIO_P NUMBER,
    CANTIDAD_INVENTARIO_P NUMBER,
    ID_PRODUCTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_INVENTARIO IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_INVENTARIO SET
        CANTIDAD_INVENTARIO = CANTIDAD_INVENTARIO_P,
        ID_PRODUCTO = ID_PRODUCTO_P
    WHERE ID_INVENTARIO = ID_INVENTARIO_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_D_INVENTARIO(
    ID_INVENTARIO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_INVENTARIO IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_INVENTARIO
    WHERE ID_INVENTARIO = ID_INVENTARIO_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE TRIGGER MVCD_ID_INSUMO
BEFORE INSERT ON MVCD_INSUMOS
FOR EACH ROW
DECLARE
    ID_INSUMO_P NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_INSUMO)+1,1) INTO ID_INSUMO_P
    FROM MVCD_INSUMOS;
    :NEW.ID_INSUMO := ID_INSUMO_P;
END;

CREATE OR REPLACE PROCEDURE MVCD_C_INSUMO(
    NOMBRE_INSUMO_P VARCHAR2,
    PRECIO_INSUMO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_INSUMOS IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_INSUMOS(NOMBRE_INSUMO,PRECIO_INSUMO)
        VALUES(NOMBRE_INSUMO_P,PRECIO_INSUMO_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
    
CREATE OR REPLACE PROCEDURE MVCD_U_INSUMO(
    ID_INSUMO_P NUMBER,
    NOMBRE_INSUMO_P VARCHAR2,
    PRECIO_INSUMO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_INSUMOS IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_INSUMOS SET
        NOMBRE_INSUMO = NOMBRE_INSUMO_P,
        PRECIO_INSUMO = PRECIO_INSUMO_P
    WHERE ID_INSUMO = ID_INSUMO_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_D_INSUMO(
    ID_INSUMO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_INSUMOS IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_INSUMOS
    WHERE ID_INSUMO = ID_INSUMO_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE TRIGGER MVCD_ID_PROVEEDOR
BEFORE INSERT ON MVCD_PROVEEDORES
FOR EACH ROW
DECLARE
    ID_PROVEEDOR_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_PROVEEDOR)+1,1) INTO ID_PROVEEDOR_T
    FROM MVCD_PROVEEDORES;
    :NEW.ID_PROVEEDOR := ID_PROVEEDOR_T;
END;

CREATE OR REPLACE PROCEDURE MVCD_C_PROVEEDOR(
    NOMBRE_PROVEEDOR_P VARCHAR2,
    TELEFONO_PROVEEDOR_P NUMBER,
    TIPO_PROVEEDOR_P VARCHAR2,
    ID_REGION_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PROVEEDORES IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_PROVEEDORES(NOMBRE_PROVEEDOR,TELEFONO_PROVEEDOR,TIPO_PROVEEDOR,ID_REGION)
        VALUES(NOMBRE_PROVEEDOR_P,TELEFONO_PROVEEDOR_P,TIPO_PROVEEDOR_P,ID_REGION_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_U_PROVEEDOR(
    ID_PROVEEDOR_P NUMBER,
    NOMBRE_PROVEEDOR_P VARCHAR2,
    TELEFONO_PROVEEDOR_P NUMBER,
    TIPO_PROVEEDOR_P VARCHAR2,
    ID_REGION_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PROVEEDORES IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_PROVEEDORES SET
        NOMBRE_PROVEEDOR = NOMBRE_PROVEEDOR_P,
        TELEFONO_PROVEEDOR = TELEFONO_PROVEEDOR_P,
        TIPO_PROVEEDOR = TIPO_PROVEEDOR_P,
        ID_REGION = ID_REGION_P
    WHERE ID_PROVEEDOR = ID_PROVEEDOR_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_D_PROVEEDOR(
    ID_PROVEEDOR_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PROVEEDORES IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_PROVEEDORES
    WHERE ID_PROVEEDOR = ID_PROVEEDOR_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE TRIGGER MVCD_ID_PAGO_PROVEEDOR
BEFORE INSERT ON MVCD_PAGO_PROVEEDOR
FOR EACH ROW
DECLARE
    ID_PAGO_PROVEEDOR_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_PAGO_PROVEEDOR)+1,1) INTO ID_PAGO_PROVEEDOR_T
    FROM MVCD_PAGO_PROVEEDOR;
    :NEW.ID_PAGO_PROVEEDOR := ID_PAGO_PROVEEDOR_T;
END;

CREATE OR REPLACE PROCEDURE MVCD_C_PAGO_PROVEEDOR(
    MONTO_PAGO_PROVEEDOR_P NUMBER,
    ID_PROVEEDOR_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PAGO_PROVEEDOR IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_PAGO_PROVEEDOR(FECHA_PAGO_PROVEEDOR,MONTO_PAGO_PROVEEDOR,ID_PROVEEDOR)
        VALUES(SYSDATE,MONTO_PAGO_PROVEEDOR_P,ID_PROVEEDOR_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_U_PAGO_PROVEEDOR(
    ID_PAGO_PROVEEDOR_P NUMBER,
    MONTO_PAGO_PROVEEDOR_P NUMBER,
    ID_PROVEEDOR_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PAGO_PROVEEDOR IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_PAGO_PROVEEDOR SET
        MONTO_PAGO_PROVEEDOR = MONTO_PAGO_PROVEEDOR_P,
        ID_PROVEEDOR = ID_PROVEEDOR_P,
        FECHA_PAGO_PROVEEDOR = SYSDATE
    WHERE ID_PAGO_PROVEEDOR = ID_PAGO_PROVEEDOR_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_D_PAGO_PROVEEDOR(
    ID_PAGO_PROVEEDOR_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PAGO_PROVEEDOR IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_PAGO_PROVEEDOR
    WHERE ID_PAGO_PROVEEDOR = ID_PAGO_PROVEEDOR_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE TRIGGER MVCD_ID_PAGO_CLIENTE
BEFORE INSERT ON MVCD_PAGO_CLIENTE
FOR EACH ROW
DECLARE
    ID_PAGO_CLIENTE_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_PAGO_CLIENTE)+1,1) INTO ID_PAGO_CLIENTE_T
    FROM MVCD_PAGO_CLIENTE;
    :NEW.ID_PAGO_CLIENTE := ID_PAGO_CLIENTE_T;
END;

CREATE OR REPLACE PROCEDURE MVCD_C_PAGO_CLIENTE(
    MONTO_PAGO_CLIENTE_P NUMBER,
    ID_TRABAJADOR_P NUMBER,
    ID_CLIENTE_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PAGO_CLIENTE IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_PAGO_CLIENTE(FECHA_PAGO_CLIENTE,MONTO_PAGO_CLIENTE,ID_TRABAJADOR,ID_CLIENTE)
        VALUES(SYSDATE,MONTO_PAGO_CLIENTE_P,ID_TRABAJADOR_P,ID_CLIENTE_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_U_PAGO_CLIENTE(
    ID_PAGO_CLIENTE_P NUMBER,
    MONTO_PAGO_CLIENTE_P NUMBER,
    ID_TRABAJADOR_P NUMBER,
    ID_CLIENTE_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PAGO_CLIENTE IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_PAGO_CLIENTE SET
        MONTO_PAGO_CLIENTE = MONTO_PAGO_CLIENTE_P,
        ID_TRABAJADOR = ID_TRABAJADOR_P,
        ID_CLIENTE = ID_CLIENTE_P,
        FECHA_PAGO_CLIENTE = SYSDATE
    WHERE ID_PAGO_CLIENTE = ID_PAGO_CLIENTE_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_D_PAGO_CLIENTE(
    ID_PAGO_CLIENTE_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PAGO_CLIENTE IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_PAGO_CLIENTE
    WHERE ID_PAGO_CLIENTE = ID_PAGO_CLIENTE_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE TRIGGER MVCD_ID_CABECERA_VENTA
BEFORE INSERT ON MVCD_CABECERA_VENTA
FOR EACH ROW
DECLARE
    ID_CABECERA_VENTA_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_CABECERA_VENTA)+1,1) INTO ID_CABECERA_VENTA_T
    FROM MVCD_CABECERA_VENTA;
    :NEW.ID_CABECERA_VENTA := ID_CABECERA_VENTA_T;
END;

CREATE OR REPLACE PROCEDURE MVCD_C_CABECERA_VENTA(
    TOTAL_VENTA_P NUMBER,
    ID_TRABAJADOR_P NUMBER,
    ID_CLIENTE_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CABECERA_VENTA IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_CABECERA_VENTA(FECHA_VENTA,TOTAL_VENTA,ID_TRABAJADOR,ID_CLIENTE)
        VALUES(SYSDATE,TOTAL_VENTA_P,ID_TRABAJADOR_P,ID_CLIENTE_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_U_CABECERA_VENTA(
    ID_CABECERA_VENTA_P NUMBER,
    TOTAL_VENTA_P NUMBER,
    ID_TRABAJADOR_P NUMBER,
    ID_CLIENTE_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CABECERA_VENTA IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_CABECERA_VENTA SET
        FECHA_VENTA = SYSDATE,
        TOTAL_VENTA = TOTAL_VENTA_P,
        ID_TRABAJADOR = ID_TRABAJADOR_P,
        ID_CLIENTE = ID_CLIENTE_P
    WHERE ID_CABECERA_VENTA = ID_CABECERA_VENTA_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_D_CABECERA_VENTA(
    ID_CABECERA_VENTA_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CABECERA_VENTA IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_CABECERA_VENTA
    WHERE ID_CABECERA_VENTA = ID_CABECERA_VENTA_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE TRIGGER MVCD_ID_CUERPO_VENTA
BEFORE INSERT ON MVCD_CUERPO_VENTA
FOR EACH ROW
DECLARE
    ID_CUERPO_VENTA_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_CUERPO_VENTA)+1,1) INTO ID_CUERPO_VENTA_T
    FROM MVCD_CUERPO_VENTA;
    :NEW.ID_CUERPO_VENTA := ID_CUERPO_VENTA_T;
END;

CREATE OR REPLACE PROCEDURE MVCD_C_CUERPO_VENTA(
    CANTIDAD_VENTA_P NUMBER,
    SUBTOTAL_VENTA_P NUMBER,
    ID_CABECERA_VENTA_P NUMBER,
    ID_PRODUCTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CUERPO_VENTA IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_CUERPO_VENTA(CANTIDAD_VENTA,SUBTOTAL_VENTA,ID_CABECERA_VENTA,ID_PRODUCTO)
        VALUES(CANTIDAD_VENTA_P,SUBTOTAL_VENTA_P,ID_CABECERA_VENTA_P,ID_PRODUCTO_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_U_CUERPO_VENTA(
    ID_CUERPO_VENTA_P NUMBER,
    CANTIDAD_VENTA_P NUMBER,
    SUBTOTAL_VENTA_P NUMBER,
    ID_CABECERA_VENTA_P NUMBER,
    ID_PRODUCTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CUERPO_VENTA IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_CUERPO_VENTA SET
        CANTIDAD_VENTA = CANTIDAD_VENTA_P,
        SUBTOTAL_VENTA = SUBTOTAL_VENTA_P,
        ID_CABECERA_VENTA = ID_CABECERA_VENTA_P,
        ID_PRODUCTO = ID_PRODUCTO_P
    WHERE ID_CUERPO_VENTA = ID_CUERPO_VENTA_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_D_CUERPO_VENTA(
    ID_CUERPO_VENTA_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CUERPO_VENTA IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_CUERPO_VENTA
    WHERE ID_CUERPO_VENTA = ID_CUERPO_VENTA_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
