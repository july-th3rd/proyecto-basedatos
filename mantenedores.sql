-- CREAR ID TRABAJADOR
CREATE OR REPLACE TRIGGER MVCD_ID_TRABAJADOR
BEFORE INSERT ON MVCD_TRABAJADORES
FOR EACH ROW
DECLARE
    ID_TRABAJADOR_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_TRABAJADOR)+1,1) INTO ID_TRABAJADOR_T
    FROM MVCD_TRABAJADORES;
    :NEW.ID_TRABAJADOR := ID_TRABAJADOR_T;
END;

-- CREAR TRABAJADOR
CREATE OR REPLACE PROCEDURE MVCD_C_TRABAJADOR(
    NOMBRE_TRABAJADOR_P VARCHAR2,
    APELLIDO1_TRABAJADOR_P VARCHAR2,
    APELLIDO2_TRABAJADOR_P VARCHAR2,
    TELEFONO_TRABAJADOR_P VARCHAR2,
    CORREO_P VARCHAR2,
    ID_REGION_P NUMBER,
    ID_ROL_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_TRABAJADORES IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_TRABAJADORES(TELEFONO_TRABAJADOR,CORREO,NOMBRE_TRABAJADOR,APELLIDO1_TRABAJADOR,APELLIDO2_TRABAJADOR,ID_REGION,ID_ROL)
        VALUES(TELEFONO_TRABAJADOR_P,UPPER(CORREO_P),UPPER(NOMBRE_TRABAJADOR_P),UPPER(APELLIDO1_TRABAJADOR_P),UPPER(APELLIDO2_TRABAJADOR_P),ID_REGION_P,ID_ROL_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

-- (READ) LEER TRABAJADOR

-- (UPDATE) ACTUALIZAR TRABAJADOR

CREATE OR REPLACE PROCEDURE MVCD_U_TRABAJADOR(
    ID_TRABAJADOR_P NUMBER,
    ID_ROL_P NUMBER,
    TELEFONO_TRABAJADOR_P NUMBER DEFAULT NULL
)
IS
BEGIN
    LOCK TABLE MVCD_TRABAJADORES IN ROW EXCLUSIVE MODE;
    IF (TELEFONO_TRABAJADOR_P IS NULL) THEN
        UPDATE MVCD_TRABAJADORES SET
            ID_ROL = ID_ROL_P
        WHERE ID_TRABAJADOR_P = ID_TRABAJADOR;
    ELSE
        UPDATE MVCD_TRABAJADORES SET
            ID_ROL = ID_ROL_P,
            TELEFONO_TRABAJADOR = TELEFONO_TRABAJADOR_P
        WHERE ID_TRABAJADOR_P = ID_TRABAJADOR;
    END IF;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

-- (DELETE) BORRAR TRABAJADOR

CREATE OR REPLACE PROCEDURE MVCD_D_TRABAJADOR(
    ID_TRABAJADOR_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_TRABAJADORES IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_TRABAJADORES WHERE ID_TRABAJADOR = ID_TRABAJADOR_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

-- CREAR ID CLIENTES
CREATE OR REPLACE TRIGGER MVCD_ID_CLIENTES
BEFORE INSERT ON MVCD_CLIENTES
FOR EACH ROW
DECLARE
    ID_CLIENTE_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_CLIENTE)+1,1) INTO ID_TRABAJADOR_T
    FROM MVCD_TRABAJADORES;
    :NEW.ID_TRABAJADOR := ID_TRABAJADOR_T;
END;

-- CREAR TRABAJADOR
CREATE OR REPLACE PROCEDURE MVCD_C_CLIENTE(
    NOMBRE_CLIENTE_P VARCHAR2,
    APELLIDO1_CLIENTE_P VARCHAR2,
    APELLIDO2_CLIENTE_P VARCHAR2,
    TELEFONO_CLIENTE_P VARCHAR2,
    ID_REGION_P NUMBER,
)
IS
BEGIN
    LOCK TABLE MVCD_CLIENTES IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_CLIENTE(NOMBRE_CLIENTE,APELLIDO1_CLIENTE,APELLIDO2_CLIENTE,TELEFONO_CLIENTE,ID_REGION)
        VALUES(NOMBRE_CLIENTE_P,APELLIDO1_CLIENTE_P,APELLIDO2_CLIENTE_P,TELEFONO_CLIENTE_P,ID_REGION_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

-- (READ) LEER CLIENTE

-- (UPDATE) ACTUALIZAR TRABAJADOR

CREATE OR REPLACE PROCEDURE MVCD_U_CLIENTE(
    ID_CLIENTE_P NUMBER,
    TELEFONO_CLIENTE_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CLIENTES IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_TRABAJADORES SET
        TELEFONO_CLIENTE = TELEFONO_CLIENTE_P
    WHERE ID_TRABAJADOR_P = ID_TRABAJADOR;
    END IF;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

-- (DELETE) BORRAR TRABAJADOR

CREATE OR REPLACE PROCEDURE MVCD_D_CLIENTE(
    ID_CLIENTE_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CLIENTES IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_CLIENTES WHERE ID_CLIENTE = ID_CLIENTE_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;

-- ID PRODUCTOS
CREATE OR REPLACE TRIGGER MVCD_ID_PRODUCTOS
BEFORE INSERT ON MVCD_PRODUCTOS
ON EACH ROW
DECLARE
    ID_PRODUCTO_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_PRODUCTO)+1,0) INTO ID_PRODUCTO_T
    FROM MVCD_PRODUCTOS;
    :NEW.ID_PRODUCTO := ID_PRODUCTO_T;
END;


-- CREAR PRODUCTOS

CREATE OR REPLACE PROCEDURE MVCD_C_PRODUCTO(
    NOMBRE_PRODUCTO_P VARCHAR2,
    TIPO_PRODUCTO_P NUMBER,
    PRECIO_PRODUCTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PRODUCTOS IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_PRODUCTOS(NOMBRE_PRODUCTO,TIPO_PRODUCTO_P,PRECIO_PRODUCTO_P)
        VALUES(NOMBRE_PRODUCTO_P,TIPO_PRODUCTO_P,PRECIO_PRODUCTO_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500,'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'ERROR DESCONOCIDO');
    ROLLBACK;
END;

-- LEER PRODUCTOS

-- ACTUALIZAR PRODUCTOS

CREATE OR REPLACE PROCEDURE MVCD_U_PRODUCTO(
    ID_PRODUCTO_P NUMBER,
    PRECIO_PRODUCTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PRODUCTOS IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_PRODUCTOS
    SET PRECIO_PRODUCTO = PRECIO_PRODUCTO_P
    WHERE ID_PRODUCTO = ID_PRODUCTO_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500,'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'ERROR DESCONOCIDO');
    ROLLBACK;
END;

-- BORRAR PRODUCTOS

CREATE OR REPLACE PROCEDURE MVCD_D_PRODUCTO(
    ID_PRODUCTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PRODUCTOS IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_PRODUCTOS
    WHERE ID_PRODUCTO = ID_PRODUCTO_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500,'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE TRIGGER MVCD_ID_PROMOCION
BEFORE INSERT ON MVCD_PROMOCIONES
FOR EACH ROW
DECLARE
    ID_PROMOCION_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_PROMOCION)+1,1) INTO ID_PROMOCION_T
    FROM MVCD_PROMOCIONES;
    :NEW.ID_PROMOCION = ID_PROMOCION_T;
END;

CREATE OR REPLACE PROCEDURE MVCD_C_PROMOCION(
    DESCUENTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PROMOCIONES IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_PROMOCIONES(DESCUENTO)
        VALUES(DESCUENTO_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500,'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_U_PROMOCION(
    ID_PROMOCION_P NUMBER,
    DESCUENTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PROMOCIONES IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_PROMOCIONES SET
        DESCUENTO = DESCUENTO_P
    WHERE ID_PROMOCION = ID_PROMOCION_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500,'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'ERROR DESCONOCIDO');
    ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE MVCD_D_PROMOCION(
    ID_PROMOCION_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PROMOCIONES IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_PROMOCIONES
    WHERE ID_PROMOCION = ID_PROMOCION_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500,'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'ERROR DESCONOCIDO');
    ROLLBACK;
END;