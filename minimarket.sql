-- Creación Tablas 

CREATE TABLE MVCD_REGIONES(
    ID_REGION NUMBER,
    NOMBRE_REGION VARCHAR2(50),
    CONSTRAINT PK_MVCD_REGIONES PRIMARY KEY(ID_REGION)
);


INSERT INTO MVCD_REGIONES(ID_REGION,NOMBRE_REGION)
    VALUES(15,'ARICA Y PARINACOTA');
INSERT INTO MVCD_REGIONES(ID_REGION,NOMBRE_REGION)
    VALUES(1,'TARAPACA');
INSERT INTO MVCD_REGIONES(ID_REGION,NOMBRE_REGION)
    VALUES(2,'ANTOFAGASTA');
INSERT INTO MVCD_REGIONES(ID_REGION,NOMBRE_REGION)
    VALUES(3,'ATACAMA');
INSERT INTO MVCD_REGIONES(ID_REGION,NOMBRE_REGION)
    VALUES(4,'COQUIMBO');
INSERT INTO MVCD_REGIONES(ID_REGION,NOMBRE_REGION)
    VALUES(5,'VALPARAISO');
INSERT INTO MVCD_REGIONES(ID_REGION,NOMBRE_REGION)
    VALUES(13,'METROPOLITANA');
INSERT INTO MVCD_REGIONES(ID_REGION,NOMBRE_REGION)
    VALUES(6,'OHIGGINS');
INSERT INTO MVCD_REGIONES(ID_REGION,NOMBRE_REGION)
    VALUES(7,'MAULE');
INSERT INTO MVCD_REGIONES(ID_REGION,NOMBRE_REGION)
    VALUES(16,'ÑUBLE');
INSERT INTO MVCD_REGIONES(ID_REGION,NOMBRE_REGION)
    VALUES(8,'BIOBIO');
INSERT INTO MVCD_REGIONES(ID_REGION,NOMBRE_REGION)
    VALUES(9,'ARAUCANIA');
INSERT INTO MVCD_REGIONES(ID_REGION,NOMBRE_REGION)
    VALUES(14,'LOS RIOS');
INSERT INTO MVCD_REGIONES(ID_REGION,NOMBRE_REGION)
    VALUES(10,'LOS LAGOS');
INSERT INTO MVCD_REGIONES(ID_REGION,NOMBRE_REGION)
    VALUES(11,'AYSEN');
INSERT INTO MVCD_REGIONES(ID_REGION,NOMBRE_REGION)
    VALUES(12,'MAGALLANES');

CREATE TABLE MVCD_CALLE_DIRECCION(
    ID_CALLE NUMBER,
    CALLE_DIRECCION VARCHAR2(50),
    NRO_DIRECCION NUMBER,
    CONSTRAINT PK_MVCD_CALLE_DIRECCION PRIMARY KEY(ID_CALLE)
);

CREATE TABLE MVCD_CIUDADES(
    ID_CIUDAD_T NUMBER,
    NOMBRE_CIUDAD VARCHAR2(50),
    ID_CALLE NUMBER,
    ID_REGION NUMBER,
    CONSTRAINT PK_MVCD_CIUDADES PRIMARY KEY(ID_CIUDAD_T),
    CONSTRAINT FK_MVCD_CIUDADES_1 FOREIGN KEY(ID_CALLE) REFERENCES MVCD_CALLE_DIRECCION(ID_CALLE),
    CONSTRAINT FK_MVCD_CIUDADES_2 FOREIGN KEY(ID_REGION) REFERENCES MVCD_REGIONES(ID_REGION)
);

CREATE TABLE MVCD_ROLES(
    ID_ROL NUMBER,
    AREA_TRABAJO VARCHAR2(20),
    CONSTRAINT PK_MVCD_ROLES PRIMARY KEY(ID_ROL)
);

CREATE TABLE MVCD_TRABAJADORES(
    ID_TRABAJADOR NUMBER,
    TELEFONO_TRABAJADOR NUMBER,
    CORREO VARCHAR2(50),
    NOMBRE_TRABAJADOR VARCHAR2(50),
    APELLIDO1_TRABAJADOR VARCHAR2(50),
    APELLIDO2_TRABAJADOR VARCHAR2(50),
    ID_REGION NUMBER,
    ID_ROL NUMBER,
    CONSTRAINT PK_MVCD_TRABAJADORES PRIMARY KEY(ID_TRABAJADOR),
    CONSTRAINT FK_MVCD_TRABAJADORES_1 FOREIGN KEY(ID_REGION) REFERENCES MVCD_REGIONES(ID_REGION),
    CONSTRAINT FK_MVCD_TRABAJADORES_2 FOREIGN KEY(ID_ROL) REFERENCES MVCD_ROLES(ID_ROL)
);

CREATE TABLE MVCD_CUENTA_BANCARIA(
    ID_CUENTA_BANCARIA NUMBER,
    RUT NUMBER,
    TIPO_CUENTA_BANCARIA VARCHAR2(20),
    NRO_CUENTA_BANCARIA NUMBER,
    NOMBRE_BANCO VARCHAR2(20),
    ID_TRABAJADOR NUMBER,
    CONSTRAINT PK_MVCD_CUENTA_BANCARIA PRIMARY KEY(ID_CUENTA_BANCARIA),
    CONSTRAINT FK_MVCD_CUENTA_BANCARIA FOREIGN KEY(ID_TRABAJADOR) REFERENCES MVCD_TRABAJADORES(ID_TRABAJADOR)
);

CREATE TABLE MVCD_CLIENTES(
    ID_CLIENTE NUMBER,
    NOMBRE_CLIENTE VARCHAR2(50),
    APELLIDO1_CLIENTE VARCHAR2(50),
    APELLIDO2_CLIENTE VARCHAR2(50),
    TELEFONO_CLIENTE NUMBER,
    ID_REGION NUMBER,
    CONSTRAINT PK_MVCD_CLIENTES PRIMARY KEY(ID_CLIENTE),
    CONSTRAINT FK_MVCD_CLIENTES FOREIGN KEY(ID_REGION) REFERENCES MVCD_REGIONES(ID_REGION)
);

CREATE TABLE MVCD_PROMOCIONES(
    ID_PROMOCION NUMBER,
    DESCUENTO NUMBER,
    CONSTRAINT PK_MVCD_PROMOCIONES PRIMARY KEY(ID_PROMOCION)
);

CREATE TABLE MVCD_PRODUCTOS(
    ID_PRODUCTO NUMBER,
    NOMBRE_PRODUCTO VARCHAR2(20),
    TIPO_PRODUCTO VARCHAR2(20),
    PRECIO_PRODUCTO NUMBER,
    CONSTRAINT PK_MVCD_PRODUCTOS PRIMARY KEY(ID_PRODUCTO)
);

CREATE TABLE MVCD_INVENTARIO(
    ID_INVENTARIO NUMBER,
    CANTIDAD_INVENTARIO NUMBER,
    ID_PRODUCTO NUMBER,
    CONSTRAINT PK_MVCD_INVENTARIO PRIMARY KEY(ID_INVENTARIO),
    CONSTRAINT FK_MVCD_INVENTARIO FOREIGN KEY(ID_PRODUCTO) REFERENCES MVCD_PRODUCTOS(ID_PRODUCTO)
);

CREATE TABLE MVCD_INSUMOS(
    ID_INSUMO NUMBER,
    NOMBRE_INSUMO VARCHAR2(50),
    PRECIO_INSUMO NUMBER,
    CONSTRAINT PK_MVCD_INSUMOS PRIMARY KEY(ID_INSUMO)
);

CREATE TABLE MVCD_PROVEEDORES(
    ID_PROVEEDOR NUMBER,
    NOMBRE_PROVEEDOR VARCHAR2(50),
    TELEFONO_PROVEEDOR NUMBER,
    TIPO_PROVEEDOR VARCHAR2(20),
    ID_REGION NUMBER,
    CONSTRAINT PK_MVCD_PROVEEDORES PRIMARY KEY(ID_PROVEEDOR),
    CONSTRAINT FK_MVCD_PROVEEDORES FOREIGN KEY(ID_REGION) REFERENCES MVCD_REGIONES(ID_REGION)
);

CREATE TABLE MVCD_PAGO_PROVEEDOR(
    ID_PAGO_PROVEEDOR NUMBER,
    FECHA_PAGO_PROVEEDOR DATE,
    MONTO_PAGO_PROVEEDOR NUMBER,
    ID_PROVEEDOR NUMBER,
    CONSTRAINT PK_MVCD_PAGO_PROVEEDOR PRIMARY KEY(ID_PAGO_PROVEEDOR),
    CONSTRAINT FK_MVCD_PAGO_PROVEEDOR FOREIGN KEY(ID_PROVEEDOR) REFERENCES MVCD_PROVEEDORES(ID_PROVEEDOR)
);

CREATE TABLE MVCD_PAGO_CLIENTE(
    ID_PAGO_CLIENTE NUMBER,
    FECHA_PAGO_CLIENTE DATE,
    MONTO_PAGO_CLIENTE NUMBER,
    ID_TRABAJADOR NUMBER,
    ID_CLIENTE NUMBER,
    CONSTRAINT PK_MVCD_PAGO_CLIENTE PRIMARY KEY(ID_PAGO_CLIENTE),
    CONSTRAINT FK_MVCD_PAGO_CLIENTE_1 FOREIGN KEY(ID_TRABAJADOR) REFERENCES MVCD_TRABAJADORES(ID_TRABAJADOR),
    CONSTRAINT FK_MVCD_PAGO_CLIENTE_2 FOREIGN KEY(ID_CLIENTE) REFERENCES MVCD_CLIENTES(ID_CLIENTE)
);

CREATE TABLE MVCD_CABECERA_VENTA(
    ID_CABECERA_VENTA NUMBER,
    FECHA_VENTA DATE,
    TOTAL_VENTA NUMBER,
    ID_TRABAJADOR NUMBER,
    ID_CLIENTE NUMBER,
    CONSTRAINT PK_MVCD_CABECERA_VENTA PRIMARY KEY(ID_CABECERA_VENTA),
    CONSTRAINT FK_MVCD_CABECERA_VENTA_1 FOREIGN KEY(ID_TRABAJADOR) REFERENCES MVCD_TRABAJADORES(ID_TRABAJADOR),
    CONSTRAINT FK_MVCD_CABECERA_VENTA_2 FOREIGN KEY(ID_CLIENTE) REFERENCES MVCD_CLIENTES(ID_CLIENTE)
);

CREATE TABLE MVCD_CUERPO_VENTA(
    ID_CUERPO_VENTA NUMBER,
    CANTIDAD_VENTA NUMBER,
    ID_CABECERA_VENTA NUMBER,
    ID_PRODUCTO NUMBER,
    CONSTRAINT PK_MVCD_CUERPO_VENTA PRIMARY KEY(ID_CUERPO_VENTA),
    CONSTRAINT FK_MVCD_CUERPO_VENTA_1 FOREIGN KEY(ID_CABECERA_VENTA) REFERENCES MVCD_CABECERA_VENTA(ID_CABECERA_VENTA),
    CONSTRAINT FK_MVCD_CUERPO_VENTA_2 FOREIGN KEY(ID_PRODUCTO) REFERENCES MVCD_PRODUCTOS(ID_PRODUCTO)
);

CREATE TABLE MVCD_DETALLE_PROVEEDOR_PRODUCTO(
    ID_PROVEEDOR NUMBER,
    ID_PRODUCTO NUMBER,
    CONSTRAINT PK_MVCD_DETALLE_PROVEEDOR_PRODUCTO PRIMARY KEY(ID_PROVEEDOR, ID_PRODUCTO),
    CONSTRAINT FK_MVCD_DETALLE_PROVEEDOR_PRODUCTO_1 FOREIGN KEY(ID_PROVEEDOR) REFERENCES MVCD_PROVEEDORES(ID_PROVEEDOR),
    CONSTRAINT FK_MVCD_DETALLE_PROVEEDOR_PRODUCTO_2 FOREIGN KEY(ID_PRODUCTO) REFERENCES MVCD_PRODUCTOS(ID_PRODUCTO)
);

CREATE TABLE MVCD_DETALLE_PROVEEDOR_INSUMO(
    ID_PROVEEDOR NUMBER,
    ID_INSUMO NUMBER,
    CONSTRAINT PK_MVCD_DETALLE_PROVEEDOR_INSUMO PRIMARY KEY(ID_PROVEEDOR, ID_INSUMO),
    CONSTRAINT FK_MVCD_DETALLE_PROVEEDOR_INSUMO_1 FOREIGN KEY(ID_PROVEEDOR) REFERENCES MVCD_PROVEEDORES(ID_PROVEEDOR),
    CONSTRAINT FK_MVCD_DETALLE_PROVEEDOR_INSUMO_2 FOREIGN KEY(ID_INSUMO) REFERENCES MVCD_INSUMOS(ID_INSUMO)
);


/* Drops de ser necesarios

}
DROP TABLE MVCD_DETALLE_PROVEEDOR_INSUMO;
DROP TABLE MVCD_DETALLE_PROVEEDOR_PRODUCTO;
DROP TABLE MVCD_CUERPO_VENTA;
DROP TABLE MVCD_PAGO_PROVEEDOR;
DROP TABLE MVCD_PAGO_CLIENTE;
DROP TABLE MVCD_CABECERA_VENTA;
DROP TABLE MVCD_INVENTARIO;


DROP TABLE MVCD_PROMOCIONES;
DROP TABLE MVCD_PRODUCTOS;
DROP TABLE MVCD_INSUMOS;
DROP TABLE MVCD_PROVEEDORES;
DROP TABLE MVCD_TRABAJADORES;
DROP TABLE MVCD_CLIENTES;


DROP TABLE MVCD_ROLES;
DROP TABLE MVCD_CIUDADES;
DROP TABLE MVCD_CALLE_DIRECCION;


DROP TABLE MVCD_REGIONES;

 */

-- Mantenedores Se incluyen los cruds (Por separado) y  Triggers para la creación de claves primarias

-- CREAR ID TRABAJADOR
CREATE OR REPLACE TRIGGER MVCD_ID_TRABAJADOR
BEFORE INSERT ON MVCD_TRABAJADORES
FOR EACH ROW
DECLARE
    ID_TRABAJADOR_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_TRABAJADOR)+1,1) INTO ID_TRABAJADOR_T
    FROM MVCD_TRABAJADORES;
    :NEW.ID_TRABAJADOR := ID_TRABAJADOR_T;
END;
/
-- CREAR TRABAJADOR
CREATE OR REPLACE PROCEDURE MVCD_C_TRABAJADOR(
    NOMBRE_TRABAJADOR_P VARCHAR2,
    APELLIDO1_TRABAJADOR_P VARCHAR2,
    APELLIDO2_TRABAJADOR_P VARCHAR2,
    TELEFONO_TRABAJADOR_P VARCHAR2,
    CORREO_P VARCHAR2,
    ID_REGION_P NUMBER,
    ID_ROL_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_TRABAJADORES IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_TRABAJADORES(TELEFONO_TRABAJADOR,CORREO,NOMBRE_TRABAJADOR,APELLIDO1_TRABAJADOR,APELLIDO2_TRABAJADOR,ID_REGION,ID_ROL)
        VALUES(TELEFONO_TRABAJADOR_P,UPPER(CORREO_P),UPPER(NOMBRE_TRABAJADOR_P),UPPER(APELLIDO1_TRABAJADOR_P),UPPER(APELLIDO2_TRABAJADOR_P),ID_REGION_P,ID_ROL_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
-- (READ) LEER TRABAJADOR

CREATE OR REPLACE PROCEDURE MVCD_R_TRABAJADOR (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT ID_TRABAJADOR, NOMBRE_TRABAJADOR, APELLIDO1_TRABAJADOR, APELLIDO2_TRABAJADOR, TELEFONO_TRABAJADOR, CORREO, ID_ROL, ID_REGION
        FROM MVCD_TRABAJADORES
        ORDER BY 1 ASC;
END;
/
-- (UPDATE) ACTUALIZAR TRABAJADOR

CREATE OR REPLACE PROCEDURE MVCD_U_TRABAJADOR(
    ID_TRABAJADOR_P NUMBER,
    NOMBRE_TRABAJADOR_P VARCHAR2,
    APELLIDO1_TRABAJADOR_P VARCHAR2,
    APELLIDO2_TRABAJADOR_P VARCHAR2,
    TELEFONO_TRABAJADOR_P NUMBER,
    CORREO_P VARCHAR2,
    ID_ROL_P NUMBER,
    ID_REGION_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_TRABAJADORES IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_TRABAJADORES SET
        NOMBRE_TRABAJADOR = NOMBRE_TRABAJADOR_P,
        APELLIDO1_TRABAJADOR = APELLIDO1_TRABAJADOR_P,
        APELLIDO2_TRABAJADOR = APELLIDO2_TRABAJADOR_P,
        TELEFONO_TRABAJADOR = TELEFONO_TRABAJADOR_P,
        CORREO = CORREO_P,
        ID_ROL = ID_ROL_P,
        ID_REGION = ID_REGION_P
    WHERE ID_TRABAJADOR = ID_TRABAJADOR_P;
    
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
-- (DELETE) BORRAR TRABAJADOR

CREATE OR REPLACE PROCEDURE MVCD_D_TRABAJADOR(
    ID_TRABAJADOR_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_TRABAJADORES IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_TRABAJADORES WHERE ID_TRABAJADOR = ID_TRABAJADOR_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
-- CREAR ID CLIENTES
CREATE OR REPLACE TRIGGER MVCD_ID_CLIENTES
BEFORE INSERT ON MVCD_CLIENTES
FOR EACH ROW
DECLARE
    ID_CLIENTE_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_CLIENTE)+1,1) INTO ID_CLIENTE_T
    FROM MVCD_CLIENTES;
    :NEW.ID_CLIENTE := ID_CLIENTE_T;
END;
/
-- CREAR TRABAJADOR
CREATE OR REPLACE PROCEDURE MVCD_C_CLIENTE(
    NOMBRE_CLIENTE_P VARCHAR2,
    APELLIDO1_CLIENTE_P VARCHAR2,
    APELLIDO2_CLIENTE_P VARCHAR2,
    TELEFONO_CLIENTE_P VARCHAR2,
    ID_REGION_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CLIENTES IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_CLIENTES(NOMBRE_CLIENTE,APELLIDO1_CLIENTE,APELLIDO2_CLIENTE,TELEFONO_CLIENTE,ID_REGION)
        VALUES(NOMBRE_CLIENTE_P,APELLIDO1_CLIENTE_P,APELLIDO2_CLIENTE_P,TELEFONO_CLIENTE_P,ID_REGION_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
-- (READ) LEER CLIENTE

CREATE OR REPLACE PROCEDURE MVCD_R_CLIENTES (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT ID_CLIENTE, NOMBRE_CLIENTE, APELLIDO1_CLIENTE, APELLIDO2_CLIENTE, TELEFONO_CLIENTE, ID_REGION
        FROM MVCD_CLIENTES
        ORDER BY 1 ASC;
END;
/
-- (UPDATE) ACTUALIZAR TRABAJADOR

CREATE OR REPLACE PROCEDURE MVCD_U_CLIENTE(
    ID_CLIENTE_P NUMBER,
    NOMBRE_CLIENTE_P VARCHAR2,
    APELLIDO1_CLIENTE_P VARCHAR2,
    APELLIDO2_CLIENTE_P VARCHAR2,
    TELEFONO_CLIENTE_P NUMBER,
    ID_REGION_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CLIENTES IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_CLIENTES SET
        NOMBRE_CLIENTE = NOMBRE_CLIENTE_P,
        APELLIDO1_CLIENTE = APELLIDO1_CLIENTE_P,
        APELLIDO2_CLIENTE = APELLIDO2_CLIENTE_P,
        TELEFONO_CLIENTE = TELEFONO_CLIENTE_P,
        ID_REGION = ID_REGION_P
    WHERE ID_CLIENTE_P = ID_CLIENTE;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
-- (DELETE) BORRAR TRABAJADOR

CREATE OR REPLACE PROCEDURE MVCD_D_CLIENTE(
    ID_CLIENTE_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CLIENTES IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_CLIENTES WHERE ID_CLIENTE = ID_CLIENTE_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
-- ID PRODUCTOS
CREATE OR REPLACE TRIGGER MVCD_ID_PRODUCTOS
BEFORE INSERT ON MVCD_PRODUCTOS
FOR EACH ROW
DECLARE
    ID_PRODUCTO_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_PRODUCTO)+1,1) INTO ID_PRODUCTO_T
    FROM MVCD_PRODUCTOS;
    :NEW.ID_PRODUCTO := ID_PRODUCTO_T;
END;
/

-- CREAR PRODUCTOS

CREATE OR REPLACE PROCEDURE MVCD_C_PRODUCTO(
    NOMBRE_PRODUCTO_P VARCHAR2,
    TIPO_PRODUCTO_P VARCHAR2,
    PRECIO_PRODUCTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PRODUCTOS IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_PRODUCTOS(NOMBRE_PRODUCTO,TIPO_PRODUCTO,PRECIO_PRODUCTO)
        VALUES(NOMBRE_PRODUCTO_P,TIPO_PRODUCTO_P,PRECIO_PRODUCTO_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500,'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
-- LEER PRODUCTOS

CREATE OR REPLACE PROCEDURE MVCD_R_PRODUCTOS (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR 
        SELECT ID_PRODUCTO, NOMBRE_PRODUCTO, TIPO_PRODUCTO, PRECIO_PRODUCTO
        FROM MVCD_PRODUCTOS
        ORDER BY 1 ASC;
END;
/
-- ACTUALIZAR PRODUCTOS

CREATE OR REPLACE PROCEDURE MVCD_U_PRODUCTO(
    ID_PRODUCTO_P NUMBER,
    NOMBRE_PRODUCTO_P VARCHAR2,
    TIPO_PRODUCTO_P VARCHAR2,   
    PRECIO_PRODUCTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PRODUCTOS IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_PRODUCTOS SET 
        NOMBRE_PRODUCTO = NOMBRE_PRODUCTO_P,
        TIPO_PRODUCTO = TIPO_PRODUCTO_P,
        PRECIO_PRODUCTO = PRECIO_PRODUCTO_P
    WHERE ID_PRODUCTO = ID_PRODUCTO_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500,'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
-- BORRAR PRODUCTOS

CREATE OR REPLACE PROCEDURE MVCD_D_PRODUCTO(
    ID_PRODUCTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PRODUCTOS IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_PRODUCTOS
    WHERE ID_PRODUCTO = ID_PRODUCTO_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500,'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE TRIGGER MVCD_ID_PROMOCION
BEFORE INSERT ON MVCD_PROMOCIONES
FOR EACH ROW
DECLARE
    ID_PROMOCION_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_PROMOCION)+1,1) INTO ID_PROMOCION_T
    FROM MVCD_PROMOCIONES;
    :NEW.ID_PROMOCION := ID_PROMOCION_T;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_C_PROMOCION(
    DESCUENTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PROMOCIONES IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_PROMOCIONES(DESCUENTO)
        VALUES(DESCUENTO_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500,'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_R_PROMOCION (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
  OPEN p_cursor FOR
    SELECT ID_PROMOCION, DESCUENTO
    FROM MVCD_PROMOCIONES
    ORDER BY 1 ASC;
END;
/

CREATE OR REPLACE PROCEDURE MVCD_U_PROMOCION(
    ID_PROMOCION_P NUMBER,
    DESCUENTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PROMOCIONES IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_PROMOCIONES SET
        DESCUENTO = DESCUENTO_P
    WHERE ID_PROMOCION = ID_PROMOCION_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500,'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_D_PROMOCION(
    ID_PROMOCION_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PROMOCIONES IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_PROMOCIONES
    WHERE ID_PROMOCION = ID_PROMOCION_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500,'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE TRIGGER MVCD_ID_ROLES
BEFORE INSERT ON MVCD_ROLES
FOR EACH ROW
DECLARE
    ID_ROL_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_ROL)+1,1) INTO ID_ROL_T
    FROM MVCD_ROLES;
    :NEW.ID_ROL := ID_ROL_T;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_C_ROL(
    AREA_TRABAJO_P VARCHAR2
)
IS
BEGIN
    LOCK TABLE MVCD_ROLES IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_ROLES(AREA_TRABAJO)
        VALUES(AREA_TRABAJO_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_R_ROLES (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT ID_ROL, AREA_TRABAJO
        FROM MVCD_ROLES
        ORDER BY 1 ASC;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_U_ROL(
    ID_ROL_P NUMBER,
    AREA_TRABAJO_P VARCHAR2
)
IS
BEGIN
    LOCK TABLE MVCD_ROLES IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_ROLES
    SET AREA_TRABAJO = AREA_TRABAJO_P
    WHERE ID_ROL = ID_ROL_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_D_ROL(
    ID_ROL_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_ROLES IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_ROLES
    WHERE ID_ROL = ID_ROL_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE TRIGGER MVCD_ID_CALLE
BEFORE INSERT ON MVCD_CALLE_DIRECCION
FOR EACH ROW
DECLARE
    ID_CALLE_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_CALLE)+1,1) INTO ID_CALLE_T
    FROM MVCD_CALLE_DIRECCION;
    :NEW.ID_CALLE := ID_CALLE_T;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_C_CALLE_DIRECCION(
    CALLE_DIRECCION_P VARCHAR2,
    NRO_DIRECCION_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CALLE_DIRECCION IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_CALLE_DIRECCION(CALLE_DIRECCION,NRO_DIRECCION)
        VALUES(CALLE_DIRECCION_P,NRO_DIRECCION_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_R_CALLE_DIRECCION (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT ID_CALLE, CALLE_DIRECCION, NRO_DIRECCION
        FROM MVCD_CALLE_DIRECCION
        ORDER BY 1 ASC;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_U_CALLE_DIRECCION(
    ID_CALLE_P NUMBER,
    CALLE_DIRECCION_P VARCHAR2,
    NRO_DIRECCION_P NUMBER
)
IS
BEGIN
    UPDATE MVCD_CALLE_DIRECCION SET
        CALLE_DIRECCION = CALLE_DIRECCION_P,
        NRO_DIRECCION = NRO_DIRECCION_P
    WHERE ID_CALLE_P = ID_CALLE;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_D_CALLE_DIRECCION(
    ID_CALLE_P NUMBER
)
IS
BEGIN
    DELETE FROM MVCD_CALLE_DIRECCION
    WHERE ID_CALLE_P = ID_CALLE;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE TRIGGER MVCD_ID_CIUDAD
BEFORE INSERT ON MVCD_CIUDADES
FOR EACH ROW
DECLARE
    ID_CIUDAD_TR NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_CIUDAD_T)+1,1) INTO ID_CIUDAD_TR
    FROM MVCD_CIUDADES;
    :NEW.ID_CIUDAD_T := ID_CIUDAD_TR;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_C_CIUDAD(
    NOMBRE_CIUDAD_P VARCHAR2,
    ID_CALLE_P NUMBER,
    ID_REGION_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CIUDADES IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_CIUDADES(NOMBRE_CIUDAD,ID_CALLE,ID_REGION)
        VALUES(NOMBRE_CIUDAD_P,ID_CALLE_P,ID_REGION_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_R_CIUDADES (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT ID_CIUDAD_T, NOMBRE_CIUDAD, ID_CALLE, ID_REGION
        FROM MVCD_CIUDADES
        ORDER BY 1 ASC;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_U_CIUDAD(
    ID_CIUDAD_T_P NUMBER,
    NOMBRE_CIUDAD_P VARCHAR2,
    ID_CALLE_P NUMBER,
    ID_REGION_P NUMBER
)
IS
BEGIN
    UPDATE MVCD_CIUDADES SET
        NOMBRE_CIUDAD = NOMBRE_CIUDAD_P,
        ID_CALLE = ID_CALLE_P,
        ID_REGION = ID_REGION_P
    WHERE ID_CIUDAD_T = ID_CIUDAD_T_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_D_CIUDAD(
    ID_CIUDAD_T_P NUMBER
)
IS
BEGIN
    DELETE FROM MVCD_CIUDADES
    WHERE ID_CIUDAD_T = ID_CIUDAD_T_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE TRIGGER MVCD_ID_CUENTA_BANCARIA
BEFORE INSERT ON MVCD_CUENTA_BANCARIA
FOR EACH ROW
DECLARE
    ID_CUENTA_BANCARIA_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_CUENTA_BANCARIA)+1,1) INTO ID_CUENTA_BANCARIA_T
    FROM MVCD_CUENTA_BANCARIA;
    :NEW.ID_CUENTA_BANCARIA := ID_CUENTA_BANCARIA_T;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_C_CUENTA_BANCARIA(
    RUT_P NUMBER,
    TIPO_CUENTA_BANCARIA_P VARCHAR2,
    NRO_CUENTA_BANCARIA_P NUMBER,
    NOMBRE_BANCO_P VARCHAR2,
    ID_TRABAJADOR_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CUENTA_BANCARIA IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_CUENTA_BANCARIA(RUT,TIPO_CUENTA_BANCARIA,NRO_CUENTA_BANCARIA,NOMBRE_BANCO,ID_TRABAJADOR)
        VALUES(RUT_P,TIPO_CUENTA_BANCARIA_P,NRO_CUENTA_BANCARIA_P,NOMBRE_BANCO_P,ID_TRABAJADOR_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_R_CUENTA_BANCARIA (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT ID_CUENTA_BANCARIA, RUT, TIPO_CUENTA_BANCARIA, NRO_CUENTA_BANCARIA, NOMBRE_BANCO, ID_TRABAJADOR
        FROM MVCD_CUENTA_BANCARIA
        ORDER BY 1 ASC;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_U_CUENTA_BANCARIA(
    ID_CUENTA_BANCARIA_P NUMBER,
    RUT_P NUMBER,
    TIPO_CUENTA_BANCARIA_P VARCHAR2,
    NRO_CUENTA_BANCARIA_P NUMBER,
    NOMBRE_BANCO_P VARCHAR2,
    ID_TRABAJADOR_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CUENTA_BANCARIA IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_CUENTA_BANCARIA SET
        RUT = RUT_P,
        TIPO_CUENTA_BANCARIA = TIPO_CUENTA_BANCARIA_P,
        NRO_CUENTA_BANCARIA = NRO_CUENTA_BANCARIA_P,
        NOMBRE_BANCO = NOMBRE_BANCO_P,
        ID_TRABAJADOR = ID_TRABAJADOR_P
    WHERE ID_CUENTA_BANCARIA = ID_CUENTA_BANCARIA_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_D_CUENTA_BANCARIA(
    ID_CUENTA_BANCARIA_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CUENTA_BANCARIA IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_CUENTA_BANCARIA
    WHERE ID_CUENTA_BANCARIA = ID_CUENTA_BANCARIA_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE TRIGGER MVCD_ID_INVENTARIO
BEFORE INSERT ON MVCD_INVENTARIO
FOR EACH ROW
DECLARE
    ID_INVENTARIO_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_INVENTARIO)+1,1) INTO ID_INVENTARIO_T
    FROM MVCD_INVENTARIO;
    :NEW.ID_INVENTARIO := ID_INVENTARIO_T;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_C_INVENTARIO(
    CANTIDAD_INVENTARIO_P NUMBER,
    ID_PRODUCTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_INVENTARIO IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_INVENTARIO(CANTIDAD_INVENTARIO,ID_PRODUCTO)
        VALUES(CANTIDAD_INVENTARIO_P,ID_PRODUCTO_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_R_INVENTARIO (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT ID_INVENTARIO, CANTIDAD_INVENTARIO, ID_PRODUCTO
        FROM MVCD_INVENTARIO
        ORDER BY 1 ASC;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_U_INVENTARIO(
    ID_INVENTARIO_P NUMBER,
    CANTIDAD_INVENTARIO_P NUMBER,
    ID_PRODUCTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_INVENTARIO IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_INVENTARIO SET
        CANTIDAD_INVENTARIO = CANTIDAD_INVENTARIO_P,
        ID_PRODUCTO = ID_PRODUCTO_P
    WHERE ID_INVENTARIO = ID_INVENTARIO_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_D_INVENTARIO(
    ID_INVENTARIO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_INVENTARIO IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_INVENTARIO
    WHERE ID_INVENTARIO = ID_INVENTARIO_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE TRIGGER MVCD_ID_INSUMO
BEFORE INSERT ON MVCD_INSUMOS
FOR EACH ROW
DECLARE
    ID_INSUMO_P NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_INSUMO)+1,1) INTO ID_INSUMO_P
    FROM MVCD_INSUMOS;
    :NEW.ID_INSUMO := ID_INSUMO_P;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_C_INSUMO(
    NOMBRE_INSUMO_P VARCHAR2,
    PRECIO_INSUMO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_INSUMOS IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_INSUMOS(NOMBRE_INSUMO,PRECIO_INSUMO)
        VALUES(NOMBRE_INSUMO_P,PRECIO_INSUMO_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_R_INSUMOS (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT ID_INSUMO, NOMBRE_INSUMO, PRECIO_INSUMO
        FROM MVCD_INSUMOS
        ORDER BY 1 ASC;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_U_INSUMO(
    ID_INSUMO_P NUMBER,
    NOMBRE_INSUMO_P VARCHAR2,
    PRECIO_INSUMO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_INSUMOS IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_INSUMOS SET
        NOMBRE_INSUMO = NOMBRE_INSUMO_P,
        PRECIO_INSUMO = PRECIO_INSUMO_P
    WHERE ID_INSUMO = ID_INSUMO_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_D_INSUMO(
    ID_INSUMO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_INSUMOS IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_INSUMOS
    WHERE ID_INSUMO = ID_INSUMO_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE TRIGGER MVCD_ID_PROVEEDOR
BEFORE INSERT ON MVCD_PROVEEDORES
FOR EACH ROW
DECLARE
    ID_PROVEEDOR_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_PROVEEDOR)+1,1) INTO ID_PROVEEDOR_T
    FROM MVCD_PROVEEDORES;
    :NEW.ID_PROVEEDOR := ID_PROVEEDOR_T;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_C_PROVEEDOR(
    NOMBRE_PROVEEDOR_P VARCHAR2,
    TELEFONO_PROVEEDOR_P NUMBER,
    TIPO_PROVEEDOR_P VARCHAR2,
    ID_REGION_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PROVEEDORES IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_PROVEEDORES(NOMBRE_PROVEEDOR,TELEFONO_PROVEEDOR,TIPO_PROVEEDOR,ID_REGION)
        VALUES(NOMBRE_PROVEEDOR_P,TELEFONO_PROVEEDOR_P,TIPO_PROVEEDOR_P,ID_REGION_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_R_PROVEEDORES (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT ID_PROVEEDOR, NOMBRE_PROVEEDOR, TELEFONO_PROVEEDOR, TIPO_PROVEEDOR, ID_REGION
        FROM MVCD_PROVEEDORES
        ORDER BY 1 ASC;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_U_PROVEEDOR(
    ID_PROVEEDOR_P NUMBER,
    NOMBRE_PROVEEDOR_P VARCHAR2,
    TELEFONO_PROVEEDOR_P NUMBER,
    TIPO_PROVEEDOR_P VARCHAR2,
    ID_REGION_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PROVEEDORES IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_PROVEEDORES SET
        NOMBRE_PROVEEDOR = NOMBRE_PROVEEDOR_P,
        TELEFONO_PROVEEDOR = TELEFONO_PROVEEDOR_P,
        TIPO_PROVEEDOR = TIPO_PROVEEDOR_P,
        ID_REGION = ID_REGION_P
    WHERE ID_PROVEEDOR = ID_PROVEEDOR_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_D_PROVEEDOR(
    ID_PROVEEDOR_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PROVEEDORES IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_PROVEEDORES
    WHERE ID_PROVEEDOR = ID_PROVEEDOR_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE TRIGGER MVCD_ID_PAGO_PROVEEDOR
BEFORE INSERT ON MVCD_PAGO_PROVEEDOR
FOR EACH ROW
DECLARE
    ID_PAGO_PROVEEDOR_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_PAGO_PROVEEDOR)+1,1) INTO ID_PAGO_PROVEEDOR_T
    FROM MVCD_PAGO_PROVEEDOR;
    :NEW.ID_PAGO_PROVEEDOR := ID_PAGO_PROVEEDOR_T;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_C_PAGO_PROVEEDOR(
    MONTO_PAGO_PROVEEDOR_P NUMBER,
    ID_PROVEEDOR_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PAGO_PROVEEDOR IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_PAGO_PROVEEDOR(FECHA_PAGO_PROVEEDOR,MONTO_PAGO_PROVEEDOR,ID_PROVEEDOR)
        VALUES(SYSDATE,MONTO_PAGO_PROVEEDOR_P,ID_PROVEEDOR_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_R_PAGO_PROVEEDOR (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT ID_PAGO_PROVEEDOR, MONTO_PAGO_PROVEEDOR, ID_PROVEEDOR
        FROM MVCD_PAGO_PROVEEDOR
        ORDER BY 1 ASC;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_U_PAGO_PROVEEDOR(
    ID_PAGO_PROVEEDOR_P NUMBER,
    MONTO_PAGO_PROVEEDOR_P NUMBER,
    ID_PROVEEDOR_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PAGO_PROVEEDOR IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_PAGO_PROVEEDOR SET
        MONTO_PAGO_PROVEEDOR = MONTO_PAGO_PROVEEDOR_P,
        ID_PROVEEDOR = ID_PROVEEDOR_P,
        FECHA_PAGO_PROVEEDOR = SYSDATE
    WHERE ID_PAGO_PROVEEDOR = ID_PAGO_PROVEEDOR_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_D_PAGO_PROVEEDOR(
    ID_PAGO_PROVEEDOR_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PAGO_PROVEEDOR IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_PAGO_PROVEEDOR
    WHERE ID_PAGO_PROVEEDOR = ID_PAGO_PROVEEDOR_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE TRIGGER MVCD_ID_PAGO_CLIENTE
BEFORE INSERT ON MVCD_PAGO_CLIENTE
FOR EACH ROW
DECLARE
    ID_PAGO_CLIENTE_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_PAGO_CLIENTE)+1,1) INTO ID_PAGO_CLIENTE_T
    FROM MVCD_PAGO_CLIENTE;
    :NEW.ID_PAGO_CLIENTE := ID_PAGO_CLIENTE_T;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_C_PAGO_CLIENTE(
    MONTO_PAGO_CLIENTE_P NUMBER,
    ID_TRABAJADOR_P NUMBER,
    ID_CLIENTE_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PAGO_CLIENTE IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_PAGO_CLIENTE(FECHA_PAGO_CLIENTE,MONTO_PAGO_CLIENTE,ID_TRABAJADOR,ID_CLIENTE)
        VALUES(SYSDATE,MONTO_PAGO_CLIENTE_P,ID_TRABAJADOR_P,ID_CLIENTE_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_R_PAGO_CLIENTE (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT ID_PAGO_CLIENTE, MONTO_PAGO_CLIENTE, ID_TRABAJADOR, ID_CLIENTE
        FROM MVCD_PAGO_CLIENTE
        ORDER BY 1 ASC;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_U_PAGO_CLIENTE(
    ID_PAGO_CLIENTE_P NUMBER,
    MONTO_PAGO_CLIENTE_P NUMBER,
    ID_TRABAJADOR_P NUMBER,
    ID_CLIENTE_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PAGO_CLIENTE IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_PAGO_CLIENTE SET
        MONTO_PAGO_CLIENTE = MONTO_PAGO_CLIENTE_P,
        ID_TRABAJADOR = ID_TRABAJADOR_P,
        ID_CLIENTE = ID_CLIENTE_P,
        FECHA_PAGO_CLIENTE = SYSDATE
    WHERE ID_PAGO_CLIENTE = ID_PAGO_CLIENTE_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_D_PAGO_CLIENTE(
    ID_PAGO_CLIENTE_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_PAGO_CLIENTE IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_PAGO_CLIENTE
    WHERE ID_PAGO_CLIENTE = ID_PAGO_CLIENTE_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE TRIGGER MVCD_ID_CABECERA_VENTA
BEFORE INSERT ON MVCD_CABECERA_VENTA
FOR EACH ROW
DECLARE
    ID_CABECERA_VENTA_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_CABECERA_VENTA)+1,1) INTO ID_CABECERA_VENTA_T
    FROM MVCD_CABECERA_VENTA;
    :NEW.ID_CABECERA_VENTA := ID_CABECERA_VENTA_T;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_C_CABECERA_VENTA(
    TOTAL_VENTA_P NUMBER,
    ID_TRABAJADOR_P NUMBER,
    ID_CLIENTE_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CABECERA_VENTA IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_CABECERA_VENTA(FECHA_VENTA,TOTAL_VENTA,ID_TRABAJADOR,ID_CLIENTE)
        VALUES(SYSDATE,TOTAL_VENTA_P,ID_TRABAJADOR_P,ID_CLIENTE_P);
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_R_CABECERA_VENTA (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT ID_CABECERA_VENTA, TOTAL_VENTA, ID_TRABAJADOR, ID_CLIENTE
        FROM MVCD_CABECERA_VENTA
        ORDER BY 1 ASC;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_U_CABECERA_VENTA(
    ID_CABECERA_VENTA_P NUMBER,
    TOTAL_VENTA_P NUMBER,
    ID_TRABAJADOR_P NUMBER,
    ID_CLIENTE_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CABECERA_VENTA IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_CABECERA_VENTA SET
        FECHA_VENTA = SYSDATE,
        TOTAL_VENTA = TOTAL_VENTA_P,
        ID_TRABAJADOR = ID_TRABAJADOR_P,
        ID_CLIENTE = ID_CLIENTE_P
    WHERE ID_CABECERA_VENTA = ID_CABECERA_VENTA_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_D_CABECERA_VENTA(
    ID_CABECERA_VENTA_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CABECERA_VENTA IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_CABECERA_VENTA
    WHERE ID_CABECERA_VENTA = ID_CABECERA_VENTA_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE TRIGGER MVCD_ID_CUERPO_VENTA
BEFORE INSERT ON MVCD_CUERPO_VENTA
FOR EACH ROW
DECLARE
    ID_CUERPO_VENTA_T NUMBER := 0;
BEGIN
    SELECT NVL(MAX(ID_CUERPO_VENTA)+1,1) INTO ID_CUERPO_VENTA_T
    FROM MVCD_CUERPO_VENTA;
    :NEW.ID_CUERPO_VENTA := ID_CUERPO_VENTA_T;
END;
/

CREATE OR REPLACE FUNCTION MVCD_COMPROBAR_INVENTARIO(ID_PRODUCTO_F NUMBER,CANTIDAD_VENTA_F NUMBER)
RETURN BOOLEAN 
IS
    CANTIDAD_F NUMBER := 0;
BEGIN
    SELECT CANTIDAD_INVENTARIO INTO CANTIDAD_F
    FROM MVCD_INVENTARIO;
    IF (CANTIDAD_VENTA_F>CANTIDAD_F) THEN
        RETURN (FALSE);
    ELSE
        RETURN (TRUE);
    END IF;
END;
/

--Función que devuelve el max id de la cabecera, se usara para ingresar cuerpos
CREATE OR REPLACE FUNCTION MAX_ID_CABECERA_VENTA
RETURN NUMBER
IS
    MAX_ID NUMBER := 0 ;
BEGIN
    SELECT MAX(ID_CABECERA_VENTA) INTO MAX_ID
    FROM MVCD_CABECERA_VENTA;
    RETURN (MAX_ID);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(100,'No hay datos en la tabla');
END;
/

CREATE OR REPLACE PROCEDURE MVCD_C_CUERPO_VENTA(
    CANTIDAD_VENTA_P NUMBER,
    ID_PRODUCTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CUERPO_VENTA IN ROW EXCLUSIVE MODE;
    LOCK TABLE MVCD_INVENTARIO IN ROW EXCLUSIVE MODE;
    IF (MVCD_COMPROBAR_INVENTARIO(ID_PRODUCTO_P,CANTIDAD_VENTA_P)) THEN
        INSERT INTO MVCD_CUERPO_VENTA(CANTIDAD_VENTA,ID_CABECERA_VENTA,ID_PRODUCTO)
            VALUES(CANTIDAD_VENTA_P,MAX_ID_CABECERA_VENTA,ID_PRODUCTO_P);
        UPDATE MVCD_INVENTARIO 
            SET CANTIDAD_INVENTARIO =  CANTIDAD_INVENTARIO - CANTIDAD_VENTA_P
        WHERE ID_PRODUCTO = ID_PRODUCTO_P;
    END IF;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/


CREATE OR REPLACE PROCEDURE MVCD_R_CUERPO_VENTA (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT ID_CUERPO_VENTA, CANTIDAD_VENTA, ID_CABECERA_VENTA, ID_PRODUCTO
        FROM MVCD_CUERPO_VENTA
        ORDER BY 1 ASC;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_U_CUERPO_VENTA(
    ID_CUERPO_VENTA_P NUMBER,
    CANTIDAD_VENTA_P NUMBER,
    ID_CABECERA_VENTA_P NUMBER,
    ID_PRODUCTO_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CUERPO_VENTA IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_CUERPO_VENTA SET
        CANTIDAD_VENTA = CANTIDAD_VENTA_P,
        ID_CABECERA_VENTA = ID_CABECERA_VENTA_P,
        ID_PRODUCTO = ID_PRODUCTO_P
    WHERE ID_CUERPO_VENTA = ID_CUERPO_VENTA_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE MVCD_D_CUERPO_VENTA(
    ID_CUERPO_VENTA_P NUMBER
)
IS
BEGIN
    LOCK TABLE MVCD_CUERPO_VENTA IN ROW EXCLUSIVE MODE;
    DELETE FROM MVCD_CUERPO_VENTA
    WHERE ID_CUERPO_VENTA = ID_CUERPO_VENTA_P;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/


--Gestores


--Función que permite sumar precios de 1 cuerpo mediante la identificación de su cabecera
CREATE OR REPLACE FUNCTION MVCD_SUMA_PRECIOS(ID_CABECERA_VENTA_F NUMBER)
RETURN NUMBER
IS
    TOTAL_F NUMBER := 0;
BEGIN  
    SELECT SUM(P.PRECIO_PRODUCTO*C.CANTIDAD_VENTA) INTO TOTAL_F
    FROM MVCD_CUERPO_VENTA C JOIN MVCD_PRODUCTOS P ON (P.ID_PRODUCTO = C.ID_PRODUCTO)
    WHERE C.ID_CABECERA_VENTA = ID_CABECERA_VENTA_F;
    RETURN(TOTAL_F);
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN 
            RAISE_APPLICATION_ERROR(100,'NO HAY DATOS EN ALGUNA TABLA');
            RETURN(-1);
END;
/
--Procedimiento que permite reemplazar el total luego de ingresado todos los productos al cuerpo

CREATE OR REPLACE FUNCTION MVCD_COMPROBAR_INVENTARIO(ID_PRODUCTO_F NUMBER,CANTIDAD_VENTA_F NUMBER)
RETURN BOOLEAN 
IS
    CANTIDAD_F NUMBER := 0;
BEGIN
    SELECT CANTIDAD_INVENTARIO INTO CANTIDAD_F
    FROM MVCD_INVENTARIO;
    IF (CANTIDAD_VENTA_F>CANTIDAD_F) THEN
        RETURN (FALSE);
    ELSE
        RETURN (TRUE);
    END IF;
END;
/

--Función que devuelve el max id de la cabecera, se usara para ingresar cuerpos
CREATE OR REPLACE FUNCTION MAX_ID_CABECERA_VENTA
RETURN NUMBER
IS
    MAX_ID NUMBER := 0 ;
BEGIN
    SELECT MAX(ID_CABECERA_VENTA) INTO MAX_ID
    FROM MVCD_CABECERA_VENTA;
    RETURN (MAX_ID);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(100,'No hay datos en la tabla');
END;
/


CREATE OR REPLACE PROCEDURE MVCD_REEMPLAZO_TOTAL
IS
    TOTAL_F NUMBER := MVCD_SUMA_PRECIOS(MAX_ID_CABECERA_VENTA);
    ID_MAX NUMBER := MAX_ID_CABECERA_VENTA;
BEGIN
    LOCK TABLE MVCD_CABECERA_VENTA IN ROW EXCLUSIVE MODE; 
    UPDATE MVCD_CABECERA_VENTA 
        SET TOTAL_VENTA = TOTAL_F
    WHERE ID_CABECERA_VENTA = ID_MAX;
    COMMIT;
    EXCEPTION
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'ERROR DE MEMORIA');
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(100, 'ERROR DESCONOCIDO');
    ROLLBACK;
END;
/

--Procedimiento para identificar que proveedor con que insumo
CREATE OR REPLACE PROCEDURE MVCD_INGRESO_INSUMO(ID_PROVEEDOR_P NUMBER,ID_INSUMO_P NUMBER)
IS
BEGIN
    LOCK TABLE MVCD_DETALLE_PROVEEDOR_INSUMO IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_DETALLE_PROVEEDOR_INSUMO(ID_PROVEEDOR,ID_INSUMO)
        VALUES(ID_PROVEEDOR_P,ID_INSUMO_P);
    COMMIT;
    EXCEPTION
    WHEN PROGRAM_ERROR THEN
        RAISE_APPLICATION_ERROR(-6501,'ERROR DE PROGRAMA');
    ROLLBACK;
END;
/

--Procedimiento para identificar que proveedor con que producto
CREATE OR REPLACE PROCEDURE MVCD_INGRESO_PRODUCTO(ID_PROVEEDOR_P NUMBER,ID_PRODUCTO_P NUMBER)
IS
BEGIN
    LOCK TABLE MVCD_DETALLE_PROVEEDOR_PRODUCTO IN ROW EXCLUSIVE MODE;
    INSERT INTO MVCD_DETALLE_PROVEEDOR_PRODUCTO(ID_PROVEEDOR,ID_PRODUCTO)
        VALUES(ID_PROVEEDOR_P,ID_PRODUCTO_P);
    COMMIT;
    EXCEPTION
    WHEN PROGRAM_ERROR THEN
        RAISE_APPLICATION_ERROR(-6501,'ERROR DE PROGRAMA');
    ROLLBACK;
END;
/



--Función que devuelve el total luego de aplicada la promoción
CREATE OR REPLACE FUNCTION MVCD_APLICAR_PROMOCION_F(ID_PROMOCION_F NUMBER,ID_CABECERA_VENTA_F NUMBER)
RETURN NUMBER
IS
    TOTAL_F NUMBER:= 0;
    DESCUENTO_F NUMBER := 0;

BEGIN
    SELECT DESCUENTO INTO DESCUENTO_F
    FROM MVCD_PROMOCIONES
    WHERE ID_PROMOCION = ID_PROMOCION_F;

    SELECT TOTAL_VENTA INTO TOTAL_F
    FROM MVCD_CABECERA_VENTA 
    WHERE ID_CABECERA_VENTA = ID_CABECERA_VENTA_F;
    RETURN(TOTAL_F-(DESCUENTO_F/100  * TOTAL_F));
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN 
            RAISE_APPLICATION_ERROR(100,'NO HAY DATOS EN ALGUNA TABLA');
            RETURN(TOTAL_F);
END;
/

--Procedimiento que actualiza el valor total de X cabecera
CREATE OR REPLACE PROCEDURE MVCD_APLICAR_PROMOCION(ID_PROMOCION_F NUMBER,ID_CABECERA_VENTA_F NUMBER)
IS
    TOTAL_VENTA_F number := MVCD_APLICAR_PROMOCION_F(ID_PROMOCION_F,ID_CABECERA_VENTA_F);
BEGIN
    LOCK TABLE MVCD_CABECERA_VENTA IN ROW EXCLUSIVE MODE;
    UPDATE MVCD_CABECERA_VENTA 
        SET TOTAL_VENTA = TOTAL_VENTA_F
    WHERE ID_CABECERA_VENTA=ID_CABECERA_VENTA_F;
    COMMIT;
    EXCEPTION
    WHEN PROGRAM_ERROR THEN
        RAISE_APPLICATION_ERROR(-6501,'ERROR DE PROGRAMA');
    ROLLBACK;
END;
/

--Reportes

--Reporte de top de ventas en el ultimo mes
CREATE OR REPLACE PROCEDURE MVCD_REPORTE_VENTAS (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT SUM( C.CANTIDAD_VENTA * C.ID_PRODUCTO ),P.NOMBRE_PRODUCTO 
        FROM MVCD_CUERPO_VENTA C JOIN MVCD_PRODUCTOS P ON(C.ID_PRODUCTO = P.ID_PRODUCTO) JOIN MVCD_CABECERA_VENTA H ON (H.ID_CABECERA_VENTA = C.ID_CABECERA_VENTA)
        WHERE H.FECHA_VENTA BETWEEN ADD_MONTHS(TRUNC(SYSDATE), -1) AND TRUNC(SYSDATE)
        GROUP BY P.NOMBRE_PRODUCTO
        ORDER BY 1;
END;
/
--Reporte de la cantidad de dinero que salio en total del negocio
CREATE OR REPLACE PROCEDURE MVCD_REPORTE_PAGO_PROVEEDOR (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT SUM(MONTO_PAGO_PROVEEDOR)
        FROM MVCD_PAGO_PROVEEDOR;
END;
/
--Reporte de la cantidad de dinero que entro al negocio en total
CREATE OR REPLACE PROCEDURE MVCD_REPORTE_PAGO_CLIENTE (p_cursor OUT SYS_REFCURSOR) AS
BEGIN
    OPEN p_cursor FOR
        SELECT SUM(MONTO_PAGO_CLIENTE)
        FROM MVCD_PAGO_CLIENTE;
END;
/






